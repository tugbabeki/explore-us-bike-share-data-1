{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Let's explore some US bikeshare data!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please specify the city you would like to discover:  washington\n",
      "Please specify the month you would like to discover or simply write 'all':  all\n",
      "Please specify the week you would like to discover or simply write 'all':  all\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Frequent Times of Travel...\n",
      "\n",
      "The Most frequent month: 6\n",
      "The Most frequent Day: wednesday\n",
      "The Most frequent Start Hour: 8\n",
      "\n",
      "This took 0.10028195381164551 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Popular Stations and Trip...\n",
      "\n",
      "The most frequent start station: Columbus Circle / Union Station \n",
      "The most frequent end station: Columbus Circle / Union Station\n",
      "The most frequent start and end station combination: Jefferson Dr & 14th St SW Jefferson Dr & 14th St SW\n",
      "\n",
      "This took 0.5162756443023682 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating Trip Duration...\n",
      "\n",
      "Total Travel Time: 2587 days 03:36:47\n",
      "Average Travel Time: 0 days 00:12:25.099356\n",
      "\n",
      "This took 0.0156252384185791 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "Here are the counts of various user types:\n",
      "Subscriber    220786\n",
      "Customer       79214\n",
      "Name: User Type, dtype: int64\n",
      "\n",
      "This took 0.031256914138793945 seconds.\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    city = input(\"Please specify the city you would like to explore: \").lower()\n",
    "\n",
    "    while city not in ['chicago', 'new york city', 'washington']:\n",
    "        city = input(\"Invalid city name. Please specify chicago, new york city or washington: \").lower()\n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "    month = input(\"Please specify the month you would like to explore or simply write 'all': \").lower()\n",
    "    while month not in ['january', 'february', 'march','april','may','june','all']:\n",
    "        month = input (\"Invalid month name. Please specify january, february, march, april, may, june or all\")\n",
    "     # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    day = input(\"Please specify the week you would like to explore or simply write 'all': \").lower()\n",
    "    while day not in ['monday', 'tuesday','wednesday', 'thursday', 'friday','saturday','sunday','all']:\n",
    "        day = input(\"Invalid day name. Please specify monday, tuesday, wednesday, thursday, friday, saturday, sunday or all\")\n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "   \n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "    df['End Time'] = pd.to_datetime(df['End Time'])\n",
    "\n",
    "    df['month'] = df['Start Time'].apply(lambda x: x.month)\n",
    "    df['day_of_week'] = df['Start Time'].apply(lambda x: x.strftime('%A').lower())\n",
    "\n",
    "\n",
    "    if month != 'all':\n",
    "        # use the index of the months list to get the corresponding int\n",
    "        months = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "        month = months.index(month) + 1\n",
    "\n",
    "        df = df.loc[df['month'] == month,:]\n",
    "\n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df.loc[df['day_of_week'] == day,:]\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "   # TO DO: display the most common month\n",
    "    print(\"The Most Common month: {}\".format(\n",
    "        str(df['month'].mode().values[0]))\n",
    "    )\n",
    "\n",
    "   # TO DO: display the most common day of week\n",
    "    print(\"The Most Common Day: {}\".format(\n",
    "        str(df['day_of_week'].mode().values[0]))\n",
    "    )\n",
    "\n",
    "    # TO DO: display the most common start hour\n",
    "    df['start_hour'] = df['Start Time'].dt.hour\n",
    "    print(\"The Most Common Start Hour: {}\".format(\n",
    "        str(df['start_hour'].mode().values[0]))\n",
    "    )\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "    print(\"The most common start station: {} \".format(\n",
    "        df['Start Station'].mode().values[0])\n",
    "    )\n",
    "\n",
    "    # TO DO: display most commonly used end station\n",
    "    print(\"The most common end station: {}\".format(\n",
    "        df['End Station'].mode().values[0])\n",
    "    )\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "    df['combination'] = df['Start Station']+ \" \" + df['End Station']\n",
    "    print(\"The most common start and end station combination: {}\".format(\n",
    "        df['combination'].mode().values[0])\n",
    "    )\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    df['duration'] = df['End Time'] - df['Start Time']\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "    print(\"Total Travel Time: {}\".format(\n",
    "        str(df['duration'].sum()))\n",
    "    )\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "    print(\"Average Travel Time: {}\".format(\n",
    "        str(df['duration'].mean()))\n",
    "    )\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df, city):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "    print(\"Here are the counts of various user types:\")\n",
    "    print(df['User Type'].value_counts())\n",
    "   \n",
    "    # TO DO: Display counts of gender\n",
    "    if city != 'washington':\n",
    "        \n",
    "        print(\"Here are the counts of gender:\")\n",
    "        print(df['Gender'].value_counts())\n",
    "\n",
    "\n",
    "        # TO DO: Display earliest, most recent, and most common year of birth\n",
    "        print(\"The earliest birth year: {}\".format(\n",
    "            str(int(df['Birth Year'].min())))\n",
    "        )\n",
    "        print(\"The latest birth year: {}\".format(\n",
    "            str(int(df['Birth Year'].max())))\n",
    "        )\n",
    "        print(\"The most common birth year: {}\".format(\n",
    "            str(int(df['Birth Year'].mode().values[0])))\n",
    "        )\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def main():\n",
    "\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df, city)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
